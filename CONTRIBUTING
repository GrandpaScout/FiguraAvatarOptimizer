General Script Requirements
===========================
Do not touch the `SCRIPT_VERSION` variable. That will be incremented as needed.

Any PRs that modify the behavior of either script must modify the behavior of *both* scripts so that they always
match as closely as possible.





Windows Script Requirements
===========================
Only features from PowerShell 5.1 and below should be added. The script should run successfully on PowerShell Desktop
5.1 as well as the latest version of PowerShell Core.  
&nbsp;

Naming Conventions
------------------
All custom classes use `PascalCase` names.
> ```ps1
> ✖ INCORRECT
> class myclass {}
>
> ✔ CORRECT
> class MyClass {}
> ```

&nbsp;  
Certain class types (mostly primitives) use `lowercase` names if used in type casting or to type a variable, otherwise
`PascalCase` is used.
> **This applies to:**  
> `[void]` `[object]` `[type]` `[ref]`
> `[switch]` `[bool]` `[boolean]`
> `[byte]` `[sbyte]` `[short]` `[int16]` `[uint16]` `[ushort]`
> `[int]` `[int32]` `[uint]` `[uint32]` `[long]` `[int64]` `[ulong]` `[uint64]`
> `[int128]` `[uint128]`
> `[intptr]` `[uintptr]` `[bigint]`
> `[half]` `[float]` `[single]` `[double]` `[decimal]`
> `[char]` `[string]` `[uri]` `[regex]` `[xml]`
> `[array]`
> `[hashtable]`

> ```ps1
> ✖ INCORRECT
> [Bool] $success = [long]::TryParse($string, [Ref]$value)
>
> ✔ CORRECT
> [bool] $success = [Long]::TryParse($string, [ref]$value)
> ```

&nbsp;  
Classes that are not covered by the above convention must follow the exact capitalization that the class was defined with in C#/.NET.  
This includes type accelerators. They must match the type they alias as best as they can.
> ```ps1
> ✖ INCORRECT
> [pscustomobject] $obj = [pscustomobject]@{name = "Me"; ip = [IpAddress]"127.0.0.1"}
>
> ✔ CORRECT
> [PSCustomObject] $obj = [PSCustomObject]@{name = "Me"; ip = [IPAddress]"127.0.0.1"}
> ```

&nbsp;  
All script-scope variables use `UPPER_CASE` names.
> ```ps1
> ✖ INCORRECT
> [string] $script_version = $true
>
> ✔ CORRECT
> [string] $SCRIPT_VERSION = $true
> ```

&nbsp;  
All static class fields use `UPPER_CASE` names.
> ```ps1
> ✖ INCORRECT
>   static [bool] $silent = $false
>
> ✔ CORRECT
>   static [bool] $SILENT = $false
> ```

&nbsp;  
All functions use `camelCase` names. (*Do not* use `Verb-Noun` as that is reserved for cmdlets.)
> ```ps1
> ✖ INCORRECT
> function Read-Config() {}
>
> ✔ CORRECT
> function readConfig() {}
> ```

&nbsp;  
All local-scope variables (including function parameters) use `lower_snake_case` names.
> ```ps1
> ✖ INCORRECT
> function foobar([int] $Value) {[bool] $ValuePlusOne = $Value + 1}
>
> ✔ CORRECT
> function foobar([int] $value) {[bool] $value_plus_one = $value + 1}
> ```

&nbsp;  
Never use cmdlet aliases. Type the full `Verb-Noun` name.
> ```ps1
> ✖ INCORRECT
> gc ".opticonfig"
>
> ✔ CORRECT
> Get-Content ".opticonfig"
> ```
&nbsp;

Style Conventions
-----------------
Always give newly defined variables (this includes function parameters) a type.
> ```ps1
> ✖ INCORRECT
> $foobar = 123
>
> ✔ CORRECT
> [int] $foobar = 123
> ```

&nbsp;  
If type-casting, do not put a space between the type and the value.
> ```ps1
> ✖ INCORRECT
> [DateTime] $very_important_date = [int] "123"
>
> ✔ CORRECT
> [DateTime] $very_important_date = [int]"123"
> ```

&nbsp;  






POSIX Script Requirements
-------------------------

Only POSIX standard features should be added. The script should run successfully on *all* POSIX-compliant shells.

Any changes to OptHandler must stay within the OptHandler ecosystem.  
All OptHandler functions and variables must be in the OptHandler class in the Windows script and begin with
`OptHandler_` in the POSIX script.
